// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: cmd/grpc/foo/service.proto

package foo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PricesServiceClient is the client API for PricesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PricesServiceClient interface {
	LastPrice(ctx context.Context, in *Instrument, opts ...grpc.CallOption) (*Price, error)
	GetPrices(ctx context.Context, opts ...grpc.CallOption) (PricesService_GetPricesClient, error)
	PricesStream(ctx context.Context, in *Instrument, opts ...grpc.CallOption) (PricesService_PricesStreamClient, error)
}

type pricesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPricesServiceClient(cc grpc.ClientConnInterface) PricesServiceClient {
	return &pricesServiceClient{cc}
}

func (c *pricesServiceClient) LastPrice(ctx context.Context, in *Instrument, opts ...grpc.CallOption) (*Price, error) {
	out := new(Price)
	err := c.cc.Invoke(ctx, "/foo.PricesService/LastPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pricesServiceClient) GetPrices(ctx context.Context, opts ...grpc.CallOption) (PricesService_GetPricesClient, error) {
	stream, err := c.cc.NewStream(ctx, &PricesService_ServiceDesc.Streams[0], "/foo.PricesService/GetPrices", opts...)
	if err != nil {
		return nil, err
	}
	x := &pricesServiceGetPricesClient{stream}
	return x, nil
}

type PricesService_GetPricesClient interface {
	Send(*Instrument) error
	CloseAndRecv() (*Prices, error)
	grpc.ClientStream
}

type pricesServiceGetPricesClient struct {
	grpc.ClientStream
}

func (x *pricesServiceGetPricesClient) Send(m *Instrument) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pricesServiceGetPricesClient) CloseAndRecv() (*Prices, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Prices)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pricesServiceClient) PricesStream(ctx context.Context, in *Instrument, opts ...grpc.CallOption) (PricesService_PricesStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &PricesService_ServiceDesc.Streams[1], "/foo.PricesService/PricesStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &pricesServicePricesStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PricesService_PricesStreamClient interface {
	Recv() (*Price, error)
	grpc.ClientStream
}

type pricesServicePricesStreamClient struct {
	grpc.ClientStream
}

func (x *pricesServicePricesStreamClient) Recv() (*Price, error) {
	m := new(Price)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PricesServiceServer is the server API for PricesService service.
// All implementations should embed UnimplementedPricesServiceServer
// for forward compatibility
type PricesServiceServer interface {
	LastPrice(context.Context, *Instrument) (*Price, error)
	GetPrices(PricesService_GetPricesServer) error
	PricesStream(*Instrument, PricesService_PricesStreamServer) error
}

// UnimplementedPricesServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPricesServiceServer struct {
}

func (UnimplementedPricesServiceServer) LastPrice(context.Context, *Instrument) (*Price, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastPrice not implemented")
}
func (UnimplementedPricesServiceServer) GetPrices(PricesService_GetPricesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPrices not implemented")
}
func (UnimplementedPricesServiceServer) PricesStream(*Instrument, PricesService_PricesStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PricesStream not implemented")
}

// UnsafePricesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PricesServiceServer will
// result in compilation errors.
type UnsafePricesServiceServer interface {
	mustEmbedUnimplementedPricesServiceServer()
}

func RegisterPricesServiceServer(s grpc.ServiceRegistrar, srv PricesServiceServer) {
	s.RegisterService(&PricesService_ServiceDesc, srv)
}

func _PricesService_LastPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Instrument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricesServiceServer).LastPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/foo.PricesService/LastPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricesServiceServer).LastPrice(ctx, req.(*Instrument))
	}
	return interceptor(ctx, in, info, handler)
}

func _PricesService_GetPrices_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PricesServiceServer).GetPrices(&pricesServiceGetPricesServer{stream})
}

type PricesService_GetPricesServer interface {
	SendAndClose(*Prices) error
	Recv() (*Instrument, error)
	grpc.ServerStream
}

type pricesServiceGetPricesServer struct {
	grpc.ServerStream
}

func (x *pricesServiceGetPricesServer) SendAndClose(m *Prices) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pricesServiceGetPricesServer) Recv() (*Instrument, error) {
	m := new(Instrument)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PricesService_PricesStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Instrument)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PricesServiceServer).PricesStream(m, &pricesServicePricesStreamServer{stream})
}

type PricesService_PricesStreamServer interface {
	Send(*Price) error
	grpc.ServerStream
}

type pricesServicePricesStreamServer struct {
	grpc.ServerStream
}

func (x *pricesServicePricesStreamServer) Send(m *Price) error {
	return x.ServerStream.SendMsg(m)
}

// PricesService_ServiceDesc is the grpc.ServiceDesc for PricesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PricesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "foo.PricesService",
	HandlerType: (*PricesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LastPrice",
			Handler:    _PricesService_LastPrice_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPrices",
			Handler:       _PricesService_GetPrices_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PricesStream",
			Handler:       _PricesService_PricesStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cmd/grpc/foo/service.proto",
}

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	Chat(ctx context.Context, opts ...grpc.CallOption) (ChatService_ChatClient, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) Chat(ctx context.Context, opts ...grpc.CallOption) (ChatService_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[0], "/foo.ChatService/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceChatClient{stream}
	return x, nil
}

type ChatService_ChatClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type chatServiceChatClient struct {
	grpc.ClientStream
}

func (x *chatServiceChatClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServiceChatClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations should embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	Chat(ChatService_ChatServer) error
}

// UnimplementedChatServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) Chat(ChatService_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).Chat(&chatServiceChatServer{stream})
}

type ChatService_ChatServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type chatServiceChatServer struct {
	grpc.ServerStream
}

func (x *chatServiceChatServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServiceChatServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "foo.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _ChatService_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cmd/grpc/foo/service.proto",
}

// BarServiceClient is the client API for BarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BarServiceClient interface {
	Bar(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BarMessage, error)
}

type barServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBarServiceClient(cc grpc.ClientConnInterface) BarServiceClient {
	return &barServiceClient{cc}
}

func (c *barServiceClient) Bar(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BarMessage, error) {
	out := new(BarMessage)
	err := c.cc.Invoke(ctx, "/foo.BarService/Bar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BarServiceServer is the server API for BarService service.
// All implementations should embed UnimplementedBarServiceServer
// for forward compatibility
type BarServiceServer interface {
	Bar(context.Context, *emptypb.Empty) (*BarMessage, error)
}

// UnimplementedBarServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBarServiceServer struct {
}

func (UnimplementedBarServiceServer) Bar(context.Context, *emptypb.Empty) (*BarMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bar not implemented")
}

// UnsafeBarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BarServiceServer will
// result in compilation errors.
type UnsafeBarServiceServer interface {
	mustEmbedUnimplementedBarServiceServer()
}

func RegisterBarServiceServer(s grpc.ServiceRegistrar, srv BarServiceServer) {
	s.RegisterService(&BarService_ServiceDesc, srv)
}

func _BarService_Bar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarServiceServer).Bar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/foo.BarService/Bar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarServiceServer).Bar(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BarService_ServiceDesc is the grpc.ServiceDesc for BarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "foo.BarService",
	HandlerType: (*BarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Bar",
			Handler:    _BarService_Bar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/grpc/foo/service.proto",
}
